name: Create Pre-Release PR from Milestone

permissions:
  contents: write
  pull-requests: write
  issues: write

on:
  workflow_dispatch:
    inputs:
      milestone_name:
        description: 'Milestone name to collect closed PRs from'
        required: true
        default: 'v3.8.2'
      target_branch:
        description: 'Target branch to merge the consolidated PR'
        required: true
        default: 'pre-release-v3.8.2'

  schedule:
    - cron: '0 10 * * 0'

env:
  MILESTONE_NAME: ${{ github.event.inputs.milestone_name || 'v3.8.2' }}
  TARGET_BRANCH: ${{ github.event.inputs.target_branch || 'pre-release-v3.8.2' }}
  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  BOT_TOKEN: ${{ secrets.BOT_TOKEN }}
  LABEL_NAME: cherry-picked

jobs:
  cherry_pick_milestone_prs:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.BOT_TOKEN }}

      - name: Setup Git User for OpenIM-Robot
        run: |
          git config --global user.email "OpenIM-Robot@users.noreply.github.com"
          git config --global user.name "OpenIM-Robot"

      - name: Fetch Milestone ID and Filter PR Numbers
        env:
          MILESTONE_NAME: ${{ env.MILESTONE_NAME }}
        run: |
          # Fetch milestones
          milestones=$(curl -s -H "Authorization: token $BOT_TOKEN" \
            -H "Accept: application/vnd.github+json" \
            "https://api.github.com/repos/${{ github.repository }}/milestones")
          milestone_id=$(echo "$milestones" | grep -B3 "\"title\": \"$MILESTONE_NAME\"" | grep '"number":' | head -n1 | grep -o '[0-9]\+')
          if [ -z "$milestone_id" ]; then
            echo "Milestone '$MILESTONE_NAME' not found. Exiting."
            exit 1
          fi
          echo "Milestone ID: $milestone_id"
          echo "MILESTONE_ID=$milestone_id" >> $GITHUB_ENV

          # Fetch all issues for the milestone
          issues=$(curl -s -H "Authorization: token $BOT_TOKEN" \
                -H "Accept: application/vnd.github+json" \
                "https://api.github.com/repos/${{ github.repository }}/issues?milestone=$milestone_id&state=closed&per_page=100")

          > pr_numbers.txt

          # Use for loop to filter PRs that do not have the 'cherry-picked' label
          for pr_number in $(echo "$issues" | jq -r '.[] | select(.pull_request != null) | .number'); do
            labels=$(curl -s -H "Authorization: token $BOT_TOKEN" \
              -H "Accept: application/vnd.github+json" \
              "https://api.github.com/repos/${{ github.repository }}/issues/$pr_number/labels" | jq -r '.[].name')

            if ! echo "$labels" | grep -q "${LABEL_NAME}"; then
              echo "PR #$pr_number does not have the 'cherry-picked' label. Adding to the list."
              echo "$pr_number" >> pr_numbers.txt
            else
              echo "PR #$pr_number already has the 'cherry-picked' label. Skipping."
            fi
          done

          echo "Filtered PR numbers:"
          cat pr_numbers.txt || echo "No closed PR numbers found for milestone."

          # Sort PR numbers
          sort -n pr_numbers.txt -o pr_numbers.txt

          echo "Sorted PR numbers:"
          cat pr_numbers.txt

      - name: Apply Patches and Cherry-pick Commits
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          BOT_TOKEN: ${{ secrets.BOT_TOKEN }}
        run: |
          # Fetch and pull the latest changes from the target branch
          git fetch origin
          git checkout $TARGET_BRANCH
          git pull origin $TARGET_BRANCH

          # Create a new branch for cherry-picking
          git checkout -b $CHERRY_PICK_BRANCH

          # Generate patches for each commit and apply them
          for pr_number in $(cat pr_numbers.txt); do
            echo "Generating patch for PR #$pr_number"
            git format-patch -1 --stdout "$pr_number" > /tmp/$pr_number.patch

            echo "Applying patch for PR #$pr_number"
            if ! git am < /tmp/$pr_number.patch; then
              echo "Resolving conflicts with incoming changes"
              git am --skip  # Skip the current patch if it fails
            fi
          done

          # Configure remote URL with BOT_TOKEN for authentication
          git remote set-url origin "https://${BOT_TOKEN}@github.com/${{ github.repository }}.git"
          git push origin $CHERRY_PICK_BRANCH --force

      - name: Create Pull Request
        run: |
          pr_title="deps: Merge ${{ env.pr_numbers_in_title }} PRs into $TARGET_BRANCH"
          pr_body=$(cat pr_body.txt)

          echo "Prepared PR title:"
          echo "$pr_title"
          echo "Prepared PR body:"
          echo "$pr_body"

          # Create the Pull Request (without the label for now)
          response=$(curl -s -X POST -H "Authorization: token $BOT_TOKEN" \
            -H "Accept: application/vnd.github+json" \
            https://api.github.com/repos/${{ github.repository }}/pulls \
            -d "$(jq -n --arg title "$pr_title" \
              --arg head "$CHERRY_PICK_BRANCH" \
              --arg base "$TARGET_BRANCH" \
              --arg body "$pr_body" \
              '{title: $title, head: $head, base: $base, body: $body}')")

          # Extract the PR number from the response
          pr_number=$(echo "$response" | jq -r '.number')

          echo "Created PR #$pr_number"

      - name: Add Label to Created Pull Request
        run: |
          curl -s -X POST -H "Authorization: token $GITHUB_TOKEN" \
            -H "Accept: application/vnd.github+json" \
            https://api.github.com/repos/${{ github.repository }}/issues/$pr_number/labels \
            -d "$(jq -n --arg label "milestone-merge" '{labels: [$label]}')"
