name: Update Version File on Release

on:
  release:
    types: [created]

jobs:
  update-version:
    runs-on: ubuntu-latest
    env:
      TAG_VERSION: ${{ github.event.release.tag_name }}
    steps:
      # Step 1: Checkout the original repository's code
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      # Step 2: Set up Git with official account
      - name: Set up Git
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"

      # Step 3: Check and delete existing tag
      - name: Check and delete existing tag
        run: |
          if git rev-parse ${{ env.TAG_VERSION }} >/dev/null 2>&1; then
            git tag -d ${{ env.TAG_VERSION }}
            git push --delete origin ${{ env.TAG_VERSION }}
          fi

      # Step 4: Update version file
      - name: Update version file
        run: |
          echo "${{ env.TAG_VERSION }}" > version/version

      # Step 5: Commit and push changes
      - name: Commit and push changes
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          git add version/version
          git commit -m "Update version to ${{ env.TAG_VERSION }}"
          git push origin HEAD:${{ github.ref }}

      # Step 6: Update tag
      - name: Update tag
        run: |
          git tag -fa ${{ env.TAG_VERSION }} -m "Update version to ${{ env.TAG_VERSION }}"
          git push origin ${{ env.TAG_VERSION }} --force

      # Step 7: Find and Publish Draft Release
      - name: Find and Publish Draft Release
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            // Get the list of releases
            const releases = await github.rest.repos.listReleases({
              owner: context.repo.owner,
              repo: context.repo.repo
            });

            // Find the draft release where the title and tag_name are the same
            const draftRelease = releases.data.find(release => 
              release.draft && release.name === release.tag_name
            );

            if (draftRelease) {
              // Publish the draft release using the release_id
              await github.rest.repos.updateRelease({
                owner: context.repo.owner,
                repo: context.repo.repo,
                release_id: draftRelease.id,  // Use release_id
                draft: false
              });

              core.info(`Draft Release ${draftRelease.tag_name} published successfully.`);
            } else {
              core.info("No matching draft release found.");
            }

      # Step 8: Create custom source code packages
      - name: Create custom source code packages
        run: |
          PROJECT_NAME="${{ github.event.repository.name }}"
          echo "Project name: $PROJECT_NAME"
          echo "Tag version: ${{ env.TAG_VERSION }}"

          CURRENT_BRANCH=""

          if [ ! -z "${{ github.event.release.target_commitish }}" ]; then
            CURRENT_BRANCH="${{ github.event.release.target_commitish }}"
            echo "Branch from release target_commitish: $CURRENT_BRANCH"
          fi

          if [ -z "$CURRENT_BRANCH" ]; then
            CURRENT_BRANCH=$(git symbolic-ref --short HEAD 2>/dev/null || git rev-parse --abbrev-ref HEAD 2>/dev/null || echo "main")
            echo "Branch from git HEAD: $CURRENT_BRANCH"
          fi

          echo "Final branch to use: $CURRENT_BRANCH"

          mkdir -p temp-package

          echo "Attempting to clone from remote repository..."
          REPO_URL="https://github.com/${{ github.repository }}.git"

          if git clone --single-branch --branch "$CURRENT_BRANCH" --no-tags "$REPO_URL" temp-package/$PROJECT_NAME-${{ env.TAG_VERSION }} 2>/dev/null; then
            echo "Successfully cloned branch $CURRENT_BRANCH from remote"
          else
            echo "Failed to clone from remote, trying local methods..."
            
            mkdir -p temp-package/$PROJECT_NAME-${{ env.TAG_VERSION }}
            rsync -av --exclude='.git' --exclude='temp-package' . temp-package/$PROJECT_NAME-${{ env.TAG_VERSION }}/
            
            cd temp-package/$PROJECT_NAME-${{ env.TAG_VERSION }}
            git init
            # git config user.name "github-actions[bot]"
            # git config user.email "github-actions[bot]@users.noreply.github.com"

            git config --global user.name "github-actions[bot]"
            git config --global user.email "github-actions[bot]@users.noreply.github.com"
            
            # git remote add origin "$REPO_URL"
            
            echo "Fetching branch history..."
            if git fetch origin "$CURRENT_BRANCH" 2>/dev/null; then
              echo "Successfully fetched $CURRENT_BRANCH history"
              git reset --hard "origin/$CURRENT_BRANCH"
              git checkout -b "$CURRENT_BRANCH"
            else
              echo "Could not fetch remote history, creating new history"
              git add .
              git commit -m "Source code for release ${{ env.TAG_VERSION }}"
              git checkout -b "$CURRENT_BRANCH"
            fi
            
            cd ../..
          fi

          cd temp-package/$PROJECT_NAME-${{ env.TAG_VERSION }}

          mkdir -p version

          echo "${{ env.TAG_VERSION }}" > version/version

          echo "Version file content after update:"
          cat version/version

          git add .
          git commit -m "Update version to ${{ env.TAG_VERSION }}"

          echo "Removing all remotes..."
          git remote | xargs -r git remote remove

          echo "Final git status in package:"
          git branch -a 2>/dev/null || echo "No git branches found"
          git log --oneline -5 2>/dev/null || echo "No git history found"
          git remote -v 2>/dev/null || echo "No remotes found"

          cd ..

          zip -r ../$PROJECT_NAME-${{ env.TAG_VERSION }}-with-git.zip $PROJECT_NAME-${{ env.TAG_VERSION }}/

          tar -czf ../$PROJECT_NAME-${{ env.TAG_VERSION }}-with-git.tar.gz $PROJECT_NAME-${{ env.TAG_VERSION }}/

          cd ..

          echo "Created files:"
          ls -la $PROJECT_NAME-${{ env.TAG_VERSION }}-with-git.*
          echo "File sizes:"
          du -h $PROJECT_NAME-${{ env.TAG_VERSION }}-with-git.*

          echo "ZIP contents (first 20 lines):"
          unzip -l $PROJECT_NAME-${{ env.TAG_VERSION }}.zip | head -20
          echo "TAR.GZ contents (first 20 lines):"
          tar -tzf $PROJECT_NAME-${{ env.TAG_VERSION }}.tar.gz | head -20

      - name: Upload custom source packages to existing release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ env.TAG_VERSION }}
          files: |
            ${{ github.event.repository.name }}-${{ env.TAG_VERSION }}-with-git.zip
            ${{ github.event.repository.name }}-${{ env.TAG_VERSION }}-with-git.tar.gz
          append_body: true
          fail_on_unmatched_files: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
