name: Publish Docker image to registries

on:
  push:
    branches:
      - release-*
  release:
    types: [published]
  workflow_dispatch:
    inputs:
      tag:
        description: "Tag version to be used for Docker image"
        required: true
        default: "v3.8.0"

env:
  GO_VERSION: "1.21"
  IMAGE_LOCAL_CACHE: "openim-server-cache"
  # IMAGE_NAME: "openim-server"
  IMAGE_NAME: ${{ github.event.repository.name }}
  DOCKER_BUILDKIT: 1

jobs:
  publish-docker-images:
    runs-on: ubuntu-latest
    if: ${{ !(github.event_name == 'pull_request' && github.event.pull_request.merged == false) }}
    steps:
      - name: Checkout main repository
        uses: actions/checkout@v4
        with:
          path: main-repo

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v3
        with:
          driver-opts: network=host

      - name: Extract metadata for Docker
        id: meta
        uses: docker/metadata-action@v5.5.1
        with:
          images: |
            ${{ secrets.DOCKER_USERNAME }}/${{ env.IMAGE_NAME }}
            ghcr.io/${{ github.repository_owner }}/${{ env.IMAGE_NAME }}
            registry.cn-hangzhou.aliyuncs.com/openimsdk/${{ env.IMAGE_NAME }}

          # tag_args+=(--tag "${{ secrets.DOCKER_USERNAME }}/$IMAGE_NAME:$tag")
          # tag_args+=(--tag "ghcr.io/${{ github.repository_owner }}/$IMAGE_NAME:$tag")
          # tag_args+=(--tag "registry.cn-hangzhou.aliyuncs.com/openimsdk/$IMAGE_NAME:$tag")
          tags: |
            type=ref,event=tag
            type=schedule
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern=v{{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=semver,pattern={{major}}
            type=sha

      # 安装skopeo工具用于处理OCI格式镜像
      - name: Install skopeo
        run: |
          sudo apt-get update && sudo apt-get install -y skopeo

      # 构建多架构镜像并导出为OCI格式
      - name: Build multi-arch images as OCI
        run: |
          # 创建目录
          mkdir -p /tmp/oci-image /tmp/docker-cache

          # 构建多架构镜像并保存为OCI格式
          docker buildx build \
            --platform linux/amd64,linux/arm64 \
            --output type=oci,dest=/tmp/oci-image/multi-arch.tar \
            --cache-to type=local,dest=/tmp/docker-cache \
            --cache-from type=gha \
            ./main-repo

          # 使用skopeo将OCI格式的amd64镜像转换为Docker格式并加载
          skopeo copy --override-arch amd64 oci-archive:/tmp/oci-image/multi-arch.tar docker-daemon:openim/openim-server:local

          # 验证镜像
          docker image ls | grep openim

      # 测试步骤（保持不变）
      - name: Checkout compose repository
        uses: actions/checkout@v4
        with:
          repository: "openimsdk/openim-docker"
          path: "compose-repo"

      - name: Get Internal IP Address
        id: get-ip
        run: |
          IP=$(hostname -I | awk '{print $1}')
          echo "The IP Address is: $IP"
          echo "ip=$IP" >> $GITHUB_OUTPUT

      - name: Update .env to use the local image
        run: |
          sed -i 's|OPENIM_SERVER_IMAGE=.*|OPENIM_SERVER_IMAGE=openim/openim-server:local|' ${{ github.workspace }}/compose-repo/.env
          sed -i 's|MINIO_EXTERNAL_ADDRESS=.*|MINIO_EXTERNAL_ADDRESS=http://${{ steps.get-ip.outputs.ip }}:10005|' ${{ github.workspace }}/compose-repo/.env

      - name: Start services using Docker Compose
        run: |
          cd ${{ github.workspace }}/compose-repo
          docker compose up -d
          sleep 60

      # - name: Check openim-server health
      #   run: |
      #     timeout=300
      #     interval=30
      #     elapsed=0
      #     while [[ $elapsed -le $timeout ]]; do
      #       if ! docker exec openim-server mage check; then
      #         echo "openim-server is not ready, waiting..."
      #         sleep $interval
      #         elapsed=$(($elapsed + $interval))
      #       else
      #         echo "Health check successful"
      #         exit 0
      #       fi
      #     done
      #     echo "Health check failed after 5 minutes"
      #     exit 1

      # - name: Check openim-chat health
      #   if: success()
      #   run: |
      #     if ! docker exec openim-chat mage check; then
      #         echo "openim-chat check failed"
      #         exit 1
      #       else
      #         echo "Health check successful"
      #         exit 0
      #       fi

      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Log in to Aliyun Container Registry
        uses: docker/login-action@v2
        with:
          registry: registry.cn-hangzhou.aliyuncs.com
          username: ${{ secrets.ALIREGISTRY_USERNAME }}
          password: ${{ secrets.ALIREGISTRY_TOKEN }}

      # 测试通过后，从缓存推送多架构镜像
      - name: Push multi-architecture images
        if: success()
        run: |
          # 从缓存推送多架构镜像
          docker buildx build \
            --platform linux/amd64,linux/arm64 \
            $(echo "${{ steps.meta.outputs.tags }}" | sed 's/,/ --tag /g' | sed 's/^/--tag /') \
            --cache-from type=local,src=/tmp/docker-cache \
            --push \
            ./main-repo
