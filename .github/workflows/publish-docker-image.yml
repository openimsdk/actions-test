name: Publish Docker image to registries

on:
  push:
    branches:
      - release-*

  release:
    types: [published]

  workflow_dispatch:
    inputs:
      tag:
        description: "Tag version to be used for Docker image"
        required: true
        default: "v3.8.0"

env:
  GO_VERSION: "1.21"
  IMAGE_LOCAL_CACHE: "openim-server-cache"
  # IMAGE_NAME: "openim-server"
  IMAGE_NAME: ${{ github.event.repository.name }}

jobs:
  publish-docker-images:
    runs-on: ubuntu-latest
    if: ${{ !(github.event_name == 'pull_request' && github.event.pull_request.merged == false) }}
    steps:
      - name: Checkout main repository
        uses: actions/checkout@v4
        with:
          path: main-repo

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Extract metadata for Docker
        id: meta
        uses: docker/metadata-action@v5.5.1
        with:
          images: |
            ${{ secrets.DOCKER_USERNAME }}/${{ env.IMAGE_NAME }}
            ghcr.io/${{ github.repository_owner }}/${{ env.IMAGE_NAME }}
            registry.cn-hangzhou.aliyuncs.com/openimsdk/${{ env.IMAGE_NAME }}

          # tag_args+=(--tag "${{ secrets.DOCKER_USERNAME }}/$IMAGE_NAME:$tag")
          # tag_args+=(--tag "ghcr.io/${{ github.repository_owner }}/$IMAGE_NAME:$tag")
          # tag_args+=(--tag "registry.cn-hangzhou.aliyuncs.com/openimsdk/$IMAGE_NAME:$tag")
          tags: |
            type=ref,event=tag
            type=schedule
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern=v{{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=semver,pattern={{major}}
            type=sha

      - name: Build multi-platform Docker image with cache
        uses: docker/build-push-action@v6.18.0
        with:
          context: ./main-repo
          platforms: linux/amd64,linux/arm64
          push: false
          tags: ${{ env.IMAGE_LOCAL_CACHE }}:latest
          labels: ${{ steps.meta.outputs.labels }}
          outputs: type=oci,dest=/tmp/openim-server.tar
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Load image for local testing
        run: |
          # 使用skopeo工具将OCI格式转换为Docker可用格式
          sudo apt-get update && sudo apt-get install -y skopeo
          skopeo copy oci-archive:/tmp/openim-server.tar docker-daemon:${{ env.IMAGE_LOCAL_CACHE }}:latest
          docker tag ${{ env.IMAGE_LOCAL_CACHE }}:latest openim/openim-server:local

      - name: Checkout compose repository
        uses: actions/checkout@v4
        with:
          repository: "openimsdk/openim-docker"
          path: "compose-repo"

      - name: Get Internal IP Address
        id: get-ip
        run: |
          IP=$(hostname -I | awk '{print $1}')
          echo "The IP Address is: $IP"
          echo "ip=$IP" >> $GITHUB_OUTPUT

      - name: Update .env to use the local image
        run: |
          sed -i 's|OPENIM_SERVER_IMAGE=.*|OPENIM_SERVER_IMAGE=openim/openim-server:local|' ${{ github.workspace }}/compose-repo/.env
          sed -i 's|MINIO_EXTERNAL_ADDRESS=.*|MINIO_EXTERNAL_ADDRESS=http://${{ steps.get-ip.outputs.ip }}:10005|' ${{ github.workspace }}/compose-repo/.env

      - name: Start services using Docker Compose
        run: |
          cd ${{ github.workspace }}/compose-repo
          docker compose up -d
          sleep 60

      # - name: Check openim-server health
      #   run: |
      #     timeout=300
      #     interval=30
      #     elapsed=0
      #     while [[ $elapsed -le $timeout ]]; do
      #       if ! docker exec openim-server mage check; then
      #         echo "openim-server is not ready, waiting..."
      #         sleep $interval
      #         elapsed=$(($elapsed + $interval))
      #       else
      #         echo "Health check successful"
      #         exit 0
      #       fi
      #     done
      #     echo "Health check failed after 5 minutes"
      #     exit 1

      # - name: Check openim-chat health
      #   if: success()
      #   run: |
      #     if ! docker exec openim-chat mage check; then
      #         echo "openim-chat check failed"
      #         exit 1
      #       else
      #         echo "Health check successful"
      #         exit 0
      #       fi

      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Log in to Aliyun Container Registry
        uses: docker/login-action@v2
        with:
          registry: registry.cn-hangzhou.aliyuncs.com
          username: ${{ secrets.ALIREGISTRY_USERNAME }}
          password: ${{ secrets.ALIREGISTRY_TOKEN }}

      # 直接推送已经构建的镜像
      - name: Push pre-built images to registries
        if: success()
        run: |
          # 重新加载之前保存的镜像
          docker load < /tmp/openim-server.tar

          # 获取并显示基础镜像
          echo "已加载的基础镜像："
          docker images ${{ env.IMAGE_LOCAL_CACHE }}:latest

          # 为每个目标标签创建新标签并推送
          echo "开始为多个仓库创建标签并推送..."
          IFS=',' read -ra TAGS <<< "${{ steps.meta.outputs.tags }}"
          for tag in "${TAGS[@]}"; do
            echo "创建并推送标签: $tag"
            docker tag ${{ env.IMAGE_LOCAL_CACHE }}:latest $tag
            docker push $tag
          done

      # # Push the previously built images
      # - name: Push pre-built images to registries
      #   if: success()
      #   uses: docker/build-push-action@v6.18.0
      #   with:
      #     context: ./main-repo
      #     push: true
      #     platforms: linux/amd64,linux/arm64
      #     tags: ${{ steps.meta.outputs.tags }}
      #     labels:
      #       ${{ steps.meta.outputs.labels }}
      #       # Use the previously built image as the cache source
      #     cache-from: |
      #       type=gha
      #       type=registry,ref=${{ env.IMAGE_LOCAL_CACHE }}:latest
