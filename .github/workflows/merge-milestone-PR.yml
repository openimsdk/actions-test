name: Merge for Closed Milestone PRs

on:
  workflow_dispatch:  # Manual trigger
    inputs:
      milestone:
        description: 'Milestone name to collect closed PRs from'
        required: true
        default: 'v3.8.2'  # Default milestone set to v3.8.2
      target_branch:
        description: 'Target branch to merge the consolidated PR'
        required: true
        default: 'pre-release-v3.8.2'  # Default target branch with pre-release-v*.*.* format
  schedule:
    - cron: '0 0 * * 0'  # Scheduled to run every Sunday at 00:00 UTC

jobs:
  cherry_pick_closed_milestone_prs:
    runs-on: ubuntu-latest
    steps:
      # Step 1: Checkout the repository code
      - name: Checkout repository
        uses: actions/checkout@v4

      # Step 2: Set up Git user details for making commits
      - name: Setup Git
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"

      # Step 3: Fetch closed PRs from the specified milestone using GitHub API and parse with a script
      - name: Fetch and Filter Closed PRs
        id: fetch_prs
        run: |
          milestone="${{ github.event.inputs.milestone }}"
          target_branch="${{ github.event.inputs.target_branch }}"
          
          # Initialize environment variable for PR branches
          echo "PR_BRANCHES=" >> $GITHUB_ENV

          # Fetch closed PRs for the specified milestone
          prs=$(curl -s -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
                -H "Accept: application/vnd.github+json" \
                "https://api.github.com/repos/${{ github.repository }}/pulls?state=closed&milestone=$milestone")

          # Parse PR numbers and head_ref branches
          echo "$prs" | grep '"number":\|"head":' | while read -r line; do
            if [[ $line == *'"number":'* ]]; then
              pr_number=$(echo "$line" | grep -o '[0-9]\+')
            elif [[ $line == *'"ref":'* ]]; then
              head_ref=$(echo "$line" | grep -o '"ref": *"[^"]*' | grep -o '[^"]*$')
              
              # Append PR number and head_ref to PR_BRANCHES env variable
              if [[ -n "$head_ref" ]]; then
                echo "PR #$pr_number with branch $head_ref ready for cherry-pick"
                echo "PR_BRANCHES+=\"$pr_number:$head_ref \"" >> $GITHUB_ENV
              fi
            fi
          done
          
      # Step 4: Create a new branch from main, cherry-pick PRs, and push to remote
      - name: Create and Cherry-pick Branch
        if: ${{ github.env.PR_BRANCHES != '' }}
        run: |
          cherry_pick_branch="milestone-cherry-pick-$(date +%Y%m%d%H%M%S)"
          target_branch="${{ github.event.inputs.target_branch }}"

          # Verify and fetch the latest for the target branch
          git fetch origin $target_branch:$target_branch || exit 1
          
          # Switch to main branch, pull latest changes, then create a new cherry-pick branch
          git checkout main
          git pull origin main
          git checkout -b $cherry_pick_branch

          # Read each PR and its head_ref branch from the PR_BRANCHES env variable
          touch conflict_commits.txt
          for pr_data in $PR_BRANCHES; do
            pr_number="${pr_data%%:*}"
            head_ref="${pr_data#*:}"

            # Fetch the latest commit from the PR's head_ref branch
            git fetch origin $head_ref || { echo "Failed to fetch head branch for PR #$pr_number"; continue; }
            latest_commit=$(git rev-parse FETCH_HEAD)

            # Check if the latest commit is already in the target branch
            if git merge-base --is-ancestor $latest_commit $target_branch 2>/dev/null; then
              echo "Skipping PR #$pr_number - Commit $latest_commit already in $target_branch"
            else
              echo "Cherry-picking PR #$pr_number with commit $latest_commit"
              if ! git cherry-pick $latest_commit; then
                echo "Conflict in PR #$pr_number - Commit $latest_commit. Logging and continuing."
                echo "$pr_number:$latest_commit" >> conflict_commits.txt
                git cherry-pick --abort
              fi
            fi
          done

          # Push the cherry-pick branch to the remote repository
          git push origin $cherry_pick_branch

          # Display any conflicts encountered
          if [[ -s conflict_commits.txt ]]; then
            echo "The following commits encountered conflicts during cherry-pick:"
            cat conflict_commits.txt
          fi

      # Step 5: Create a single pull request to merge the cherry-pick branch into the target branch
      - name: Create Pull Request to Target Branch
        if: ${{ github.env.PR_BRANCHES != '' }}
        uses: peter-evans/create-pull-request@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          branch: $cherry_pick_branch
          base: ${{ github.event.inputs.target_branch }}
          title: "Consolidated Closed Milestone PRs for ${{ github.event.inputs.target_branch }}"
          body: |
            This PR includes all cherry-picked changes from closed PRs in milestone '${{ github.event.inputs.milestone }}' to ${{ github.event.inputs.target_branch }}.
            
            The following commits encountered conflicts during cherry-pick:
            $(cat conflict_commits.txt || echo "No conflicts.")
