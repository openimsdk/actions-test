name: Create Pre-Release PR from Milestone

on:
  workflow_dispatch:  # Allows manual trigger
    inputs:
      milestone:
        description: 'Milestone name to collect closed PRs from'
        required: true
        default: 'v3.8.2'  # Default milestone name
      target_branch:
        description: 'Target branch to merge the consolidated PR'
        required: true
        default: 'pre-release-v3.8.2'  # Default target branch
  schedule:
    - cron: '0 10 * * 0'  # Scheduled to run every Sunday at 10:00 UTC

env:
  MILESTONE_NAME: ${{ github.event.inputs.milestone || 'v3.8.2' }}
  TARGET_BRANCH: ${{ github.event.inputs.target_branch || 'pre-release-v3.8.2' }}

jobs:
  cherry_pick_milestone_prs:
    runs-on: ubuntu-latest
    steps:
      # Step 1: Checkout repository code
      - name: Checkout repository
        uses: actions/checkout@v4

      # Step 2: Set up Git user details for commits
      - name: Setup Git
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"

      # Step 3: Fetch closed and merged PRs for the specified milestone
      - name: Fetch Closed PRs and Merge Commits
        run: |
          # Fetch all closed PRs from the repository
          prs=$(curl -s -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
                -H "Accept: application/vnd.github+json" \
                "https://api.github.com/repos/${{ github.repository }}/pulls?state=closed")

          # Initialize files to store PR numbers and commit hashes
          > pr_numbers.txt
          > commit_hashes.txt

          # Parse PRs and filter by milestone name and merged status
          echo "$prs" | grep -E '"number":|"merge_commit_sha":|"milestone":|"merged_at":' | while read -r line; do
            if [[ $line == *'"milestone":'* && $line != *'"title": "'"$MILESTONE_NAME"'"'* ]]; then
              skip_next="true"
            elif [[ $line == *'"number":'* && -z "$skip_next" ]]; then
              pr_number=$(echo "$line" | grep -o '[0-9]\+')
              echo "#$pr_number" >> pr_numbers.txt
            elif [[ $line == *'"merge_commit_sha":'* && -z "$skip_next" ]]; then
              merge_commit=$(echo "$line" | grep -o '"[a-f0-9]\{40\}"' | tr -d '"')
              if [[ -n "$merge_commit" ]]; then
                echo "$merge_commit" >> commit_hashes.txt
              fi
            elif [[ $line == *'"merged_at":'* && -z "$skip_next" ]]; then
              if [[ $line == *"null"* ]]; then
                skip_next="true"
                sed -i '$ d' pr_numbers.txt  # Remove last PR number if it's not merged
              else
                unset skip_next
              fi
            fi
          done

          # Display parsed PR numbers and merge commits
          echo "Parsed PR numbers:"
          cat pr_numbers.txt || echo "No PR numbers found for milestone."
          echo "Parsed merge commits:"
          cat commit_hashes.txt || echo "No merge commits found for milestone."

      # Step 4: Cherry-pick all selected merge commits into a new branch
      - name: Cherry-pick Merged Commits and Create Branch
        run: |
          # Check if commit_hashes.txt has valid entries
          if [ ! -s commit_hashes.txt ]; then
            echo "No valid PRs found with merge commits. Exiting."
            exit 1
          fi

          # Generate a branch name using the first commit hash
          first_commit_hash=$(head -n 1 commit_hashes.txt)
          cherry_pick_branch="cherry-pick-${first_commit_hash:0:7}"

          # Checkout main and create a new branch for cherry-pick
          git checkout main
          git pull origin main
          git checkout -b $cherry_pick_branch

          # Perform cherry-pick for each commit individually
          while IFS= read -r commit_hash; do
            echo "Attempting to cherry-pick commit $commit_hash"
            if ! git cherry-pick "$commit_hash"; then
              echo "Cherry-pick failed for commit $commit_hash, skipping..."
              git cherry-pick --abort
            fi
          done < commit_hashes.txt

          # Push the new cherry-pick branch to the repository
          git push origin $cherry_pick_branch

      # Step 5: Create a pull request to merge the cherry-pick branch into the target branch
      - name: Create Pull Request to Target Branch
        uses: peter-evans/create-pull-request@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          branch: $cherry_pick_branch
          base: ${{ env.TARGET_BRANCH }}
          title: "Consolidated PRs for Pre-Release - ${{ env.TARGET_BRANCH }}"
          body: |
            This PR includes cherry-picked changes from closed PRs in milestone '${{ env.MILESTONE_NAME }}'.
            Included PRs:
            $(cat pr_numbers.txt | awk '{print "- " $1}')
