name: Create Pre-Release PR from Milestone

on:
  workflow_dispatch:  # Allows manual trigger
    inputs:
      milestone_name:
        description: 'Milestone name to collect closed PRs from'
        required: true
        default: 'v3.8.2'  # Default milestone name
      target_branch:
        description: 'Target branch to merge the consolidated PR'
        required: true
        default: 'pre-release-v3.8.2'  # Default target branch
  schedule:
    - cron: '0 10 * * 0'  # Scheduled to run every Sunday at 10:00 UTC

env:
  MILESTONE_NAME: ${{ github.event.inputs.milestone_name || 'v3.8.2' }}
  TARGET_BRANCH: ${{ github.event.inputs.target_branch || 'pre-release-v3.8.2' }}

jobs:
  cherry_pick_milestone_prs:
    runs-on: ubuntu-latest
    steps:
      # Step 1: Checkout repository code
      - name: Checkout repository
        uses: actions/checkout@v4

      # Step 2: Set up Git user details for commits
      - name: Setup Git
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"

      # Step 3: Fetch milestone ID based on milestone name
      - name: Fetch Milestone ID
        id: get_milestone_id
        run: |
          milestones=$(curl -s -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
            -H "Accept: application/vnd.github+json" \
            "https://api.github.com/repos/${{ github.repository }}/milestones")

          milestone_id=$(echo "$milestones" | grep -B3 "\"title\": \"$MILESTONE_NAME\"" | grep '"number":' | head -n1 | grep -o '[0-9]\+')
          if [ -z "$milestone_id" ]; then
            echo "Milestone '$MILESTONE_NAME' not found. Exiting."
            exit 1
          fi

          echo "Milestone ID: $milestone_id"
          echo "MILESTONE_ID=$milestone_id" >> $GITHUB_ENV

      # Step 4: Fetch all closed PR numbers for the specified milestone
      - name: Fetch Closed PR Numbers for Milestone
        run: |
          issues=$(curl -s -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
                -H "Accept: application/vnd.github+json" \
                "https://api.github.com/repos/${{ github.repository }}/issues?milestone=${{ env.MILESTONE_ID }}&state=closed&per_page=100")

          > pr_numbers.txt

          echo "$issues" | jq -r '.[] | select(.pull_request != null) | .number' >> pr_numbers.txt

          echo "Parsed PR numbers:"
          cat pr_numbers.txt || echo "No closed PR numbers found for milestone."

      # Step 5: Fetch merge_commit_sha for each closed PR number
      - name: Fetch Merge Commits for Closed PRs
        run: |
          > commit_hashes.txt

          while IFS= read -r pr_number; do
            echo "Processing PR #$pr_number"
            merge_commit=$(curl -s -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
              -H "Accept: application/vnd.github+json" \
              "https://api.github.com/repos/${{ github.repository }}/pulls/$pr_number" | jq -r '.merge_commit_sha')

            if [ "$merge_commit" != "null" ]; then
              echo "$merge_commit" >> commit_hashes.txt
            fi
          done < pr_numbers.txt

          echo "Parsed merge commits:"
          cat commit_hashes.txt || echo "No merge commits found for closed PRs in milestone."

      # Step 6: Cherry-pick all selected merge commits into a new branch
      - name: Cherry-pick Merged Commits and Create Branch
        run: |
          if [ ! -s commit_hashes.txt ]; then
            echo "No valid PRs found with merge commits. Exiting."
            exit 1
          fi

          first_commit_hash=$(head -n 1 commit_hashes.txt)
          cherry_pick_branch="cherry-pick-${first_commit_hash:0:7}"

          git checkout ${{ env.TARGET_BRANCH }}
          git pull origin ${{ env.TARGET_BRANCH }}
          git checkout -b $cherry_pick_branch

          while IFS= read -r commit_hash; do
            echo "Attempting to cherry-pick commit $commit_hash"
            if ! git cherry-pick "$commit_hash"; then
              echo "Cherry-pick failed for commit $commit_hash, skipping..."
              git cherry-pick --abort
            fi
          done < commit_hashes.txt

          git push origin $cherry_pick_branch

      # Step 7: Create a pull request to merge the cherry-pick branch into the target branch
      - name: Create Pull Request to Target Branch
        uses: peter-evans/create-pull-request@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          branch: $cherry_pick_branch
          base: ${{ env.TARGET_BRANCH }}
          title: "Consolidated PRs for Pre-Release - ${{ env.TARGET_BRANCH }}"
          body: |
            This PR includes cherry-picked changes from closed PRs in milestone '${{ env.MILESTONE_NAME }}'.
            Included PRs:
            $(cat pr_numbers.txt | awk '{print "- " $1}')
