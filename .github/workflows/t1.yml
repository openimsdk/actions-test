name: Create Pre-Release PR from Milestone

permissions:
  contents: write
  pull-requests: write
  issues: write

on:
  workflow_dispatch:
    inputs:
      milestone_name:
        description: 'Milestone name to collect closed PRs from'
        required: true
        default: 'v3.8.2'
      target_branch:
        description: 'Target branch to merge the consolidated PR'
        required: true
        default: 'pre-release-v3.8.2'
  schedule:
    - cron: '0 10 * * 0'

env:
  MILESTONE_NAME: ${{ github.event.inputs.milestone_name || 'v3.8.2' }}
  TARGET_BRANCH: ${{ github.event.inputs.target_branch || 'pre-release-v3.8.2' }}
  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  BOT_TOKEN: ${{ secrets.BOT_TOKEN }}
  LABEL_NAME: cherry-picked

jobs:
  cherry_pick_milestone_prs:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.BOT_TOKEN }}

      - name: Fetch Milestone ID and Filter Closed PRs Without Label
        env:
          MILESTONE_NAME: ${{ env.MILESTONE_NAME }}
        run: |
          # Fetch milestones
          milestones=$(curl -s -H "Authorization: token $GITHUB_TOKEN" \
            -H "Accept: application/vnd.github+json" \
            "https://api.github.com/repos/${{ github.repository }}/milestones")
          milestone_id=$(echo "$milestones" | grep -B3 "\"title\": \"$MILESTONE_NAME\"" | grep '"number":' | head -n1 | grep -o '[0-9]\+')
          if [ -z "$milestone_id" ]; then
            echo "Milestone '$MILESTONE_NAME' not found. Exiting."
            exit 1
          fi
          echo "Milestone ID: $milestone_id"
          echo "MILESTONE_ID=$milestone_id" >> $GITHUB_ENV

          # Fetch closed PRs in the milestone
          issues=$(curl -s -H "Authorization: token $GITHUB_TOKEN" \
                -H "Accept: application/vnd.github+json" \
                "https://api.github.com/repos/${{ github.repository }}/issues?milestone=$milestone_id&state=closed&per_page=100")
          
          # Initialize PR number array
          filtered_pr_numbers=""
          
          # Loop through each PR to check if it has the cherry-picked label
          for pr_number in $(echo "$issues" | jq -r '.[] | select(.pull_request != null) | .number'); do
            labels=$(curl -s -H "Authorization: token $GITHUB_TOKEN" \
              -H "Accept: application/vnd.github+json" \
              "https://api.github.com/repos/${{ github.repository }}/issues/$pr_number/labels" | jq -r '.[].name')

            if ! echo "$labels" | grep -q "${LABEL_NAME}"; then
              filtered_pr_numbers="$filtered_pr_numbers $pr_number"
            else
              echo "PR #$pr_number already has the cherry-picked label. Skipping."
            fi
          done

          # Sort PR numbers
          sorted_pr_numbers=$(echo "$filtered_pr_numbers" | tr ' ' '\n' | sort -n)

          # Convert sorted PR numbers to a single line string
          sorted_pr_numbers_single_line=$(echo "$sorted_pr_numbers" | tr '\n' ' ')

          echo "Sorted PR numbers:"
          echo "$sorted_pr_numbers_single_line"

          echo "SORTED_PR_NUMBERS=$sorted_pr_numbers_single_line" >> $GITHUB_ENV

      - name: Fetch Commit Hashes for Sorted PRs
        run: |
          sorted_pr_numbers=$(echo $SORTED_PR_NUMBERS)

          filtered_commit_hashes=""
          for pr_number in $sorted_pr_numbers; do
            pr_data=$(curl -s -H "Authorization: token $GITHUB_TOKEN" \
              -H "Accept: application/vnd.github+json" \
              "https://api.github.com/repos/${{ github.repository }}/pulls/$pr_number/commits")

            first_pr_commit_sha=$(echo "$pr_data" | jq -r '.[0].sha')
            filtered_commit_hashes="$filtered_commit_hashes $first_pr_commit_sha"
          done

          echo "Filtered Commit Hashes:"
          echo "$filtered_commit_hashes"

          echo "FILTERED_COMMIT_HASHES=$filtered_commit_hashes" >> $GITHUB_ENV

      - name: Cherry-pick Commits to New Branch and Push
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          BOT_TOKEN: ${{ secrets.BOT_TOKEN }}
        run: |
          if [ -z "$FILTERED_COMMIT_HASHES" ]; then
            echo "No commits to cherry-pick. Exiting."
            exit 0
          fi

          git fetch origin
          git checkout $TARGET_BRANCH
          git pull origin $TARGET_BRANCH

          first_commit_hash=$(echo "$FILTERED_COMMIT_HASHES" | awk '{print $1}')
          cherry_pick_branch="cherry-pick-${first_commit_hash:0:7}"
          git checkout -b $cherry_pick_branch

          for commit_hash in $FILTERED_COMMIT_HASHES; do
            echo "Attempting to cherry-pick commit $commit_hash"
            if ! git cherry-pick "$commit_hash" --strategy=recursive -X theirs; then
              if git diff --cached --quiet; then
                echo "Empty commit, continuing..."
                git cherry-pick --continue --allow-empty
              else
                echo "Conflict resolved with incoming content"
                git cherry-pick --continue
              fi
            fi
          done

          git remote set-url origin "https://${BOT_TOKEN}@github.com/openimsdk/actions-test.git"
          git push origin $cherry_pick_branch

      - name: Create Pull Request (using script)
        run: |
          if [ -z "$SORTED_PR_NUMBERS" ]; then
            echo "No PRs to include in the cherry-pick. Skipping pull request creation."
            exit 0
          fi

          pr_title="Consolidated PRs for Pre-Release - $TARGET_BRANCH - $(echo $SORTED_PR_NUMBERS | awk '{printf "#%s ", $1}')"
          pr_body="This PR includes cherry-picked changes from closed PRs in milestone '${MILESTONE_NAME}'."

          pull_request=$(curl -s -X POST -H "Authorization: token $GITHUB_TOKEN" \
            -H "Accept: application/vnd.github+json" \
            https://api.github.com/repos/${{ github.repository }}/pulls \
            -d "$(jq -n \
              --arg title "$pr_title" \
              --arg head "$cherry_pick_branch" \
              --arg base "$TARGET_BRANCH" \
              --arg body "$pr_body" \
              '{title: $title, head: $head, base: $base, body: $body}')")

          new_pr_number=$(echo "$pull_request" | jq -r '.number')

      - name: Label Successfully Cherry-Picked PRs
        if: ${{ success() }}
        run: |
          for pr_number in $SORTED_PR_NUMBERS; do
            curl -s -X POST -H "Authorization: token $GITHUB_TOKEN" \
              -H "Accept: application/vnd.github+json" \
              "https://api.github.com/repos/${{ github.repository }}/issues/$pr_number/labels" \
              -d "$(jq -n --arg label "${LABEL_NAME}" '{labels: [$label]}')"
          done
