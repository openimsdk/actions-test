name: Create Pre-Release PR from Milestone

permissions:
  contents: write
  pull-requests: write

on:
  workflow_dispatch:
    inputs:
      milestone_name:
        description: 'Milestone name to collect closed PRs from'
        required: true
        default: 'v3.8.2'
      target_branch:
        description: 'Target branch to merge the consolidated PR'
        required: true
        default: 'pre-release-v3.8.2'
  schedule:
    - cron: '0 10 * * 0'

env:
  MILESTONE_NAME: ${{ github.event.inputs.milestone_name || 'v3.8.2' }}
  TARGET_BRANCH: ${{ github.event.inputs.target_branch || 'pre-release-v3.8.2' }}
  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  BOT_TOKEN: ${{ secrets.BOT_TOKEN }}

jobs:
  cherry_pick_milestone_prs:
    runs-on: ubuntu-latest
    steps:
      # Step 1: Checkout repository code with full history
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.BOT_TOKEN }}
        #   token: ${{ secrets.GITHUB_TOKEN }}  # Original GitHub token (commented out)

      # Step 2: Fetch milestone ID, PR numbers, and filter out already cherry-picked PRs
      - name: Fetch Milestone ID and Filter PRs
        env:
          MILESTONE_NAME: ${{ env.MILESTONE_NAME }}
        run: |
          milestones=$(curl -s -H "Authorization: token $GITHUB_TOKEN" \
            -H "Accept: application/vnd.github+json" \
            "https://api.github.com/repos/${{ github.repository }}/milestones")
          milestone_id=$(echo "$milestones" | grep -B3 "\"title\": \"$MILESTONE_NAME\"" | grep '"number":' | head -n1 | grep -o '[0-9]\+')
          if [ -z "$milestone_id" ]; then
            echo "Milestone '$MILESTONE_NAME' not found. Exiting."
            exit 1
          fi
          echo "Milestone ID: $milestone_id"
          echo "MILESTONE_ID=$milestone_id" >> $GITHUB_ENV

          issues=$(curl -s -H "Authorization: token $GITHUB_TOKEN" \
                -H "Accept: application/vnd.github+json" \
                "https://api.github.com/repos/${{ github.repository }}/issues?milestone=$milestone_id&state=closed&per_page=100")
          pr_numbers=$(echo "$issues" | jq -r '.[] | select(.pull_request != null) | .number')

          # Initialize filtered lists for PR numbers and commit hashes
          filtered_pr_numbers=""
          filtered_commit_hashes=""

          # Fetch target branch for content comparison
          git fetch origin ${{ env.TARGET_BRANCH }}
          git checkout ${{ env.TARGET_BRANCH }}

          # Check each PR's files and contents
          for pr_number in $pr_numbers; do
            pr_data=$(curl -s -H "Authorization: token $GITHUB_TOKEN" \
              -H "Accept: application/vnd.github+json" \
              "https://api.github.com/repos/${{ github.repository }}/pulls/$pr_number/files")
            
            all_files_exist=true
            for file in $(echo "$pr_data" | jq -r '.[].filename'); do
              # Check if file content in the PR matches the content in the target branch
              pr_file_content=$(curl -s -H "Authorization: token $GITHUB_TOKEN" \
                -H "Accept: application/vnd.github+json" \
                "https://api.github.com/repos/${{ github.repository }}/contents/$file?ref=pull/$pr_number/head" | jq -r '.content' | base64 --decode)
              
              target_file_content=$(cat "$file" 2>/dev/null || echo "")

              # If contents differ, mark as not fully contained in the target branch
              if [ "$pr_file_content" != "$target_file_content" ]; then
                all_files_exist=false
                break
              fi
            done

            # Add PR if any of its file contents are not in the target branch
            if [ "$all_files_exist" = "false" ]; then
              echo "PR #$pr_number contains changes not in ${TARGET_BRANCH}, including for cherry-pick."
              filtered_pr_numbers="$filtered_pr_numbers $pr_number"
              first_pr_commit_sha=$(curl -s -H "Authorization: token $GITHUB_TOKEN" \
                -H "Accept: application/vnd.github+json" \
                "https://api.github.com/repos/${{ github.repository }}/pulls/$pr_number/commits" | jq -r '.[0].sha')
              filtered_commit_hashes="$filtered_commit_hashes $first_pr_commit_sha"
            else
              echo "PR #$pr_number already fully exists in ${TARGET_BRANCH}, skipping..."
            fi
          done

          # Save filtered PR numbers and commit hashes as environment variables
          echo "FILTERED_PR_NUMBERS=$filtered_pr_numbers" >> $GITHUB_ENV
          echo "FILTERED_COMMIT_HASHES=$filtered_commit_hashes" >> $GITHUB_ENV

          echo "Filtered PR numbers:"
          echo "$filtered_pr_numbers"
          echo "Filtered commit hashes:"
          echo "$filtered_commit_hashes"

      # Step 3: Cherry-pick commits to a new branch and push it
      - name: Cherry-pick Commits to New Branch and Push
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          BOT_TOKEN: ${{ secrets.BOT_TOKEN }}
        run: |
          # Check if there are commits to cherry-pick
          if [ -z "$FILTERED_COMMIT_HASHES" ]; then
            echo "No commits to cherry-pick. Exiting."
            exit 0
          fi

          git fetch origin
          git checkout -b $TARGET_BRANCH origin/$TARGET_BRANCH
          git pull origin $TARGET_BRANCH

          # Create cherry-pick branch based on the first filtered commit hash
          first_commit_hash=$(echo "$FILTERED_COMMIT_HASHES" | awk '{print $1}')
          cherry_pick_branch="cherry-pick-${first_commit_hash:0:7}"
          git checkout -b $cherry_pick_branch

          # Cherry-pick commits
          for commit_hash in $FILTERED_COMMIT_HASHES; do
            echo "Attempting to cherry-pick commit $commit_hash"
            if ! git cherry-pick "$commit_hash" --strategy=recursive -X theirs; then
              if git diff --cached --quiet; then
                echo "Empty commit, continuing..."
                git cherry-pick --continue --allow-empty
              else
                echo "Conflict resolved with incoming content"
                git cherry-pick --continue
              fi
            fi
          done

          # Configure remote URL with BOT_TOKEN for authentication
          git remote set-url origin "https://${BOT_TOKEN}@github.com/${{ github.repository }}.git"
          # git remote set-url origin "https://${GITHUB_TOKEN}@github.com/${{ github.repository }}.git"  # Original GitHub token for push (commented out)

          # Push the cherry-pick branch to the remote repository
          git push origin $cherry_pick_branch

      # Step 4: Create a pull request to merge the new branch into TARGET_BRANCH (using script)
      - name: Create Pull Request (using script)
        run: |
          # Check if there are filtered PRs to create a title and pull request
          if [ -z "$FILTERED_PR_NUMBERS" ] || [ -z "$FILTERED_COMMIT_HASHES" ]; then
            echo "No PRs to include in the cherry-pick. Skipping pull request creation."
            exit 0
          fi

          pr_title="Consolidated PRs for Pre-Release - $TARGET_BRANCH - $(echo $FILTERED_PR_NUMBERS | awk '{printf "#%s ", $1}')"
          pr_body="This PR includes cherry-picked changes from closed PRs in milestone '${MILESTONE_NAME}'."

          curl -s -X POST -H "Authorization: token $GITHUB_TOKEN" \
            -H "Accept: application/vnd.github+json" \
            https://api.github.com/repos/${{ github.repository }}/pulls \
            -d "$(jq -n \
              --arg title "$pr_title" \
              --arg head "$cherry_pick_branch" \
              --arg base "$TARGET_BRANCH" \
              --arg body "$pr_body" \
              '{title: $title, head: $head, base: $base, body: $body}')"
