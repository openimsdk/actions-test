name: Create Pre-Release PR from Milestone

permissions:
  contents: write
  pull-requests: write

on:
  workflow_dispatch:
    inputs:
      milestone_name:
        description: 'Milestone name to collect closed PRs from'
        required: true
        default: 'v3.8.2'
      target_branch:
        description: 'Target branch to merge the consolidated PR'
        required: true
        default: 'pre-release-v3.8.2'
  schedule:
    - cron: '0 10 * * 0'

env:
  MILESTONE_NAME: ${{ github.event.inputs.milestone_name || 'v3.8.2' }}
  TARGET_BRANCH: ${{ github.event.inputs.target_branch || 'pre-release-v3.8.2' }}
  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

jobs:
  cherry_pick_milestone_prs:
    runs-on: ubuntu-latest
    steps:
      # Step 1: Checkout repository code with full history
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Ensure full history is fetched
          token: ${{ secrets.GITHUB_TOKEN }}  # Apply the GitHub token for authentication

      # Step 2: Set up Git user details for commits
      - name: Setup Git
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"

      # Step 3: Fetch milestone ID and PR details
      - name: Fetch Milestone ID and PR Numbers
        env:
          MILESTONE_NAME: ${{ env.MILESTONE_NAME }}
        run: |
          milestones=$(curl -s -H "Authorization: token $GITHUB_TOKEN" \
            -H "Accept: application/vnd.github+json" \
            "https://api.github.com/repos/${{ github.repository }}/milestones")
          milestone_id=$(echo "$milestones" | grep -B3 "\"title\": \"$MILESTONE_NAME\"" | grep '"number":' | head -n1 | grep -o '[0-9]\+')
          if [ -z "$milestone_id" ]; then
            echo "Milestone '$MILESTONE_NAME' not found. Exiting."
            exit 1
          fi
          echo "Milestone ID: $milestone_id"
          echo "MILESTONE_ID=$milestone_id" >> $GITHUB_ENV

          issues=$(curl -s -H "Authorization: token $GITHUB_TOKEN" \
                -H "Accept: application/vnd.github+json" \
                "https://api.github.com/repos/${{ github.repository }}/issues?milestone=$milestone_id&state=closed&per_page=100")
          echo "$issues" | jq -r '.[] | select(.pull_request != null) | .number' > pr_numbers.txt
          
          # Sort PR numbers in ascending order
          sort -n pr_numbers.txt -o pr_numbers.txt
          
          echo "Parsed and sorted PR numbers:"
          cat pr_numbers.txt || echo "No closed PR numbers found for milestone."

          pr_numbers=$(cat pr_numbers.txt | tr '\n' ' ')
          echo "PR_NUMBERS=$pr_numbers" >> $GITHUB_ENV

      # Step 4: Fetch merge_commit_sha for each closed PR number in sorted order
      - name: Fetch Merge Commits for Sorted PRs
        run: |
          > commit_hashes.txt

          for pr_number in $PR_NUMBERS; do
            echo "Processing PR #$pr_number"
            merge_commit=$(curl -s -H "Authorization: token $GITHUB_TOKEN" \
              -H "Accept: application/vnd.github+json" \
              "https://api.github.com/repos/${{ github.repository }}/pulls/$pr_number" | jq -r '.merge_commit_sha')
            if [ "$merge_commit" != "null" ]; then
              echo "$merge_commit" >> commit_hashes.txt
            fi
          done

          echo "Parsed merge commits in sorted order:"
          cat commit_hashes.txt || echo "No merge commits found for closed PRs in milestone."

          commit_hashes=$(cat commit_hashes.txt | tr '\n' ' ')
          first_commit_hash=$(head -n 1 commit_hashes.txt)
          cherry_pick_branch="cherry-pick-${first_commit_hash:0:7}"
          echo "COMMIT_HASHES=$commit_hashes" >> $GITHUB_ENV
          echo "CHERRY_PICK_BRANCH=$cherry_pick_branch" >> $GITHUB_ENV

      # Step 5: Cherry-pick commits to a new branch and push it
      - name: Cherry-pick Commits to New Branch and Push
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          git fetch origin
          git checkout -b $TARGET_BRANCH origin/$TARGET_BRANCH
          git pull origin $TARGET_BRANCH

          git checkout -b $CHERRY_PICK_BRANCH

          for commit_hash in $COMMIT_HASHES; do
            echo "Attempting to cherry-pick commit $commit_hash"
            git cherry-pick "$commit_hash" --strategy=recursive -X theirs || git cherry-pick --continue
          done

          # Configure remote URL with GITHUB_TOKEN for authentication
          git remote set-url origin "https://${GITHUB_TOKEN}@github.com/${{ github.repository }}.git"

          # Push the cherry-pick branch to the remote repository
          git push origin $CHERRY_PICK_BRANCH

      # Step 6: Create a pull request to merge the new branch into TARGET_BRANCH (using script)
      - name: Create Pull Request (using script)
        run: |
          pr_title="Consolidated PRs for Pre-Release - $TARGET_BRANCH - $(cat pr_numbers.txt | awk '{printf "#%s ", $1}')"
          pr_body="This PR includes cherry-picked changes from closed PRs in milestone '${MILESTONE_NAME}'."

          curl -s -X POST -H "Authorization: token $GITHUB_TOKEN" \
            -H "Accept: application/vnd.github+json" \
            https://api.github.com/repos/${{ github.repository }}/pulls \
            -d "$(jq -n \
              --arg title "$pr_title" \
              --arg head "$CHERRY_PICK_BRANCH" \
              --arg base "$TARGET_BRANCH" \
              --arg body "$pr_body" \
              '{title: $title, head: $head, base: $base, body: $body}')"

    #   - name: Create Pull Request
    #     uses: peter-evans/create-pull-request@v4
    #     with:
    #       token: ${{ secrets.GITHUB_TOKEN }}
    #       branch: ${{ env.CHERRY_PICK_BRANCH }}
    #       base: $TARGET_BRANCH
    #       title: |
    #         Consolidated PRs for Pre-Release - $TARGET_BRANCH - $(awk '{printf "#%s ", $1}' pr_numbers.txt)
    #       body: |
    #         This PR includes cherry-picked changes from closed PRs in milestone '${{ env.MILESTONE_NAME }}'.
