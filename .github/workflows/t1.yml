name: Create Pre-Release PR from Milestone

permissions:
  contents: write
  pull-requests: write
  issues: write

on:
  workflow_dispatch:
    inputs:
      milestone_name:
        description: 'Milestone name to collect closed PRs from'
        required: true
        default: 'v3.8.2'
      target_branch:
        description: 'Target branch to merge the consolidated PR'
        required: true
        default: 'pre-release-v3.8.2'
  schedule:
    - cron: '0 10 * * 0'

env:
  MILESTONE_NAME: ${{ github.event.inputs.milestone_name || 'v3.8.2' }}
  TARGET_BRANCH: ${{ github.event.inputs.target_branch || 'pre-release-v3.8.2' }}
  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  BOT_TOKEN: ${{ secrets.BOT_TOKEN }}
  LABEL_NAME: cherry-picked

jobs:
  cherry_pick_milestone_prs:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.BOT_TOKEN }}

      - name: Fetch Milestone ID and Filter PRs
        env:
          MILESTONE_NAME: ${{ env.MILESTONE_NAME }}
        run: |
          milestones=$(curl -s -H "Authorization: token $GITHUB_TOKEN" \
            -H "Accept: application/vnd.github+json" \
            "https://api.github.com/repos/${{ github.repository }}/milestones")
          milestone_id=$(echo "$milestones" | grep -B3 "\"title\": \"$MILESTONE_NAME\"" | grep '"number":' | head -n1 | grep -o '[0-9]\+')
          if [ -z "$milestone_id" ]; then
            echo "Milestone '$MILESTONE_NAME' not found. Exiting."
            exit 1
          fi
          echo "Milestone ID: $milestone_id"
          echo "MILESTONE_ID=$milestone_id" >> $GITHUB_ENV

          issues=$(curl -s -H "Authorization: token $GITHUB_TOKEN" \
                -H "Accept: application/vnd.github+json" \
                "https://api.github.com/repos/${{ github.repository }}/issues?milestone=$milestone_id&state=closed&per_page=100")
          pr_numbers=$(echo "$issues" | jq -r '.[] | select(.pull_request != null and (.labels[]?.name != "cherry-picked")) | .number')

          filtered_pr_numbers=""
          filtered_commit_hashes=""

          git fetch origin ${{ env.TARGET_BRANCH }}
          git checkout ${{ env.TARGET_BRANCH }}

          for pr_number in $pr_numbers; do
            pr_data=$(curl -s -H "Authorization: token $GITHUB_TOKEN" \
              -H "Accept: application/vnd.github+json" \
              "https://api.github.com/repos/${{ github.repository }}/pulls/$pr_number/commits")

            first_pr_commit_sha=$(echo "$pr_data" | jq -r '.[0].sha')
            filtered_pr_numbers="$filtered_pr_numbers $pr_number"
            filtered_commit_hashes="$filtered_commit_hashes $first_pr_commit_sha"
          done

          echo "FILTERED_PR_NUMBERS=$filtered_pr_numbers" >> $GITHUB_ENV
          echo "FILTERED_COMMIT_HASHES=$filtered_commit_hashes" >> $GITHUB_ENV

          echo "Filtered PR numbers:"
          echo "$filtered_pr_numbers"
          echo "Filtered commit hashes:"
          echo "$filtered_commit_hashes"

      - name: Cherry-pick Commits to New Branch and Push
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          BOT_TOKEN: ${{ secrets.BOT_TOKEN }}
        run: |
          if [ -z "$FILTERED_COMMIT_HASHES" ]; then
            echo "No commits to cherry-pick. Exiting."
            exit 0
          fi

          git fetch origin

          git checkout $TARGET_BRANCH
          git pull origin $TARGET_BRANCH

          first_commit_hash=$(echo "$FILTERED_COMMIT_HASHES" | awk '{print $1}')
          cherry_pick_branch="cherry-pick-${first_commit_hash:0:7}"
          git checkout -b $cherry_pick_branch

          for commit_hash in $FILTERED_COMMIT_HASHES; do
            echo "Attempting to cherry-pick commit $commit_hash"
            if ! git cherry-pick "$commit_hash" --strategy=recursive -X theirs; then
              if git diff --cached --quiet; then
                echo "Empty commit, continuing..."
                git cherry-pick --continue --allow-empty
              else
                echo "Conflict resolved with incoming content"
                git cherry-pick --continue
              fi
            fi
          done

          git remote set-url origin "https://${BOT_TOKEN}@github.com/openimsdk/actions-test.git"
          git push origin $cherry_pick_branch

      - name: Create Pull Request (using script)
        run: |
          if [ -z "$FILTERED_PR_NUMBERS" ] || [ -z "$FILTERED_
