name: Build and Push multiple Docker Images

on:
  push:
    branches:
      - release-*
  release:
    types: [published]
  workflow_dispatch:
    inputs:
      tag:
        description: "Tag version to be used for Docker image"
        required: true
        default: "v3.8.3"

jobs:
  find-images:
    runs-on: ubuntu-latest
    outputs:
      images: ${{ steps.find.outputs.images }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Find Docker image directories
        id: find
        run: |
          images=$(find build/images -mindepth 1 -maxdepth 1 -type d -printf "%f," | sed 's/,$//')
          echo "images=$images" >> $GITHUB_OUTPUT

  build-and-push:
    needs: find-images
    runs-on: ubuntu-latest
    strategy:
      matrix:
        image: ${{ fromJson('["' + needs.find-images.outputs.images.replace(',', '","') + '"]') }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Cache Docker layers
        uses: actions/cache@v3
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}-${{ matrix.image }}
          restore-keys: |
            ${{ runner.os }}-buildx-${{ github.sha }}-${{ matrix.image }}
            ${{ runner.os }}-buildx-

      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Log in to Aliyun Container Registry
        uses: docker/login-action@v2
        with:
          registry: registry.cn-hangzhou.aliyuncs.com
          username: ${{ secrets.ALIREGISTRY_USERNAME }}
          password: ${{ secrets.ALIREGISTRY_TOKEN }}

      - name: Extract metadata for Docker (tags, labels)
        id: meta
        uses: docker/metadata-action@v5
        with:
          tags: |
            type=ref,event=tag
            type=schedule
            type=ref,event=branch
            type=semver,pattern={{version}}
            type=semver,pattern=v{{version}}
            # type=semver,pattern={{major}}.{{minor}}
            # type=semver,pattern={{major}}
            type=semver,pattern=release-{{raw}}
            type=sha
            type=raw,value=${{ github.event.inputs.tag }}

      - name: Build and push Docker image
        run: |
          ROOT_DIR="build/images"
          IMAGE_NAME=${{ matrix.image }}
          dir="$ROOT_DIR/$IMAGE_NAME"
          
          dockerfile=$(find "$dir" -maxdepth 1 -type f \( -iname 'dockerfile' -o -iname '*.dockerfile' \) | head -n 1)
          
          if [ -n "$dockerfile" ] && [ -f "$dockerfile" ]; then
              echo "Building Docker image for $IMAGE_NAME with tags:"
              
              tag_args=()
              while IFS= read -r tag; do
                  tag_args+=(--tag "${{ secrets.DOCKER_USERNAME }}/$IMAGE_NAME:$tag")
                  tag_args+=(--tag "ghcr.io/${{ github.repository_owner }}/$IMAGE_NAME:$tag")
                  tag_args+=(--tag "registry.cn-hangzhou.aliyuncs.com/openimsdk/$IMAGE_NAME:$tag")
              done <<< "${{ steps.meta.outputs.tags }}"

              docker buildx build --platform linux/amd64,linux/arm64 \
                --file "$dockerfile" \
                "${tag_args[@]}" \
                --cache-from type=local,src=/tmp/.buildx-cache \
                --cache-to type=local,dest=/tmp/.buildx-cache-new \
                --push "$dir"

              if [ $? -ne 0 ]; then
                  echo "Docker buildx build failed for $IMAGE_NAME"
                  exit 1
              fi
          else
              echo "No valid Dockerfile found in $dir"
          fi

      - name: Update Docker cache
        if: always()
        run: |
          mv /tmp/.buildx-cache-new /tmp/.buildx-cache